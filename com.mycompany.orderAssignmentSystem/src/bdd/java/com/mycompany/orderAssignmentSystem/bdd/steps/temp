#Feature: Application Views Management
  #Specifications of the behavior of both the Order and Worker Views in the Application.
#
#Scenario: The initial state of the Worker View
  #Given the database contains an order with customer_name "Jhon", customer_phone "3401372678", category "PLUMBER", status "PENDING", customer_address "Piazza Luigi", appointment_date "12-12-2024", order_description "Bring Tape", and worker with worker_name "Jhon", worker_phone "3401372678", and worker_category "PLUMBER"
  #When the Order View is shown
  #Then the order list contains an element with customer_name "Jhon", customer_phone "3401372678", category "PLUMBER", status "PENDING", customer_address "Piazza Luigi", appointment_date "12-12-2024", order_description "Bring Tape", and worker with worker_name "Jhon", worker_phone "3401372678", and worker_category "PLUMBER"
  #When the Worker View is shown
  #Then the worker list contains an element with worker_name "Jhon", worker_phone "3401372678", and worker_category "PLUMBER"   
  


package com.mycompany.orderAssignmentSystem.bdd.steps;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.swing.launcher.ApplicationLauncher.application;

import java.util.HashMap;
import java.util.Map;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.EntityTransaction;
import javax.persistence.Persistence;
import javax.swing.JFrame;

import org.assertj.swing.core.BasicRobot;
import org.assertj.swing.core.GenericTypeMatcher;
import org.assertj.swing.core.Robot;
import org.assertj.swing.finder.WindowFinder;
import org.assertj.swing.fixture.FrameFixture;

import com.mycompany.orderAssignmentSystem.enumerations.OrderCategory;
import com.mycompany.orderAssignmentSystem.enumerations.OrderStatus;
import com.mycompany.orderAssignmentSystem.model.CustomerOrder;
import com.mycompany.orderAssignmentSystem.model.Worker;

import io.cucumber.java.After;
import io.cucumber.java.Before;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.Then;
import io.cucumber.java.en.When;

public class OrderWorkerSwingAppSteps extends ConfigSteps {
	private static EntityManagerFactory entityManagerFactory;
	private static EntityManager entityManager;
	private static Map<String, String> properties = new HashMap<>();
	private FrameFixture orderViewWindow;
	private FrameFixture workerViewWindow;
	private Robot robotWithCurrentAwtHierarchy = BasicRobot.robotWithCurrentAwtHierarchy();

	@Before
	public void setUp() {
		// TODO Auto-generated method stub
		String persistenceUnitName = "test_myPersistenceUnit";
		String jdbcUrl = "jdbc:postgresql://" + host + ":" + port + "/" + database;
		System.out.println(jdbcUrl);

		properties.put("javax.persistence.jdbc.url", jdbcUrl);
		properties.put("javax.persistence.jdbc.user", user);
		properties.put("javax.persistence.jdbc.password", password);
		properties.put("hibernate.dialect", "org.hibernate.dialect.PostgreSQLDialect");
		properties.put("hibernate.hbm2ddl.auto", "create-drop");

		entityManagerFactory = Persistence.createEntityManagerFactory(persistenceUnitName, properties);
		entityManager = entityManagerFactory.createEntityManager();
	}

	@After
	public void tearDown() {
		entityManagerFactory.close();
		entityManager.close();
		if(orderViewWindow!=null) {
			orderViewWindow.cleanUp();
		}
		if(workerViewWindow!=null) {
			workerViewWindow.cleanUp();
		}
	}

//	@Given("the database contains a worker with worker_name {string}, worker_phone {string}, and worker_category {string}")
//	public void the_database_contains_a_worker_with_worker_name_worker_phone_and_worker_category(String workerName,
//			String workerPhone, String workerCategory) {
//		Worker worker = new Worker(workerName, workerPhone, OrderCategory.valueOf(workerCategory));
//		EntityTransaction workerTransaction = entityManager.getTransaction();
//		workerTransaction.begin();
//		entityManager.merge(worker);
//		workerTransaction.commit();
//	}

	@Given("the database contains an order with customer_name {string}, customer_phone {string}, category {string}, status {string}, customer_address {string}, appointment_date {string}, order_description {string}, and worker with worker_name {string}, worker_phone {string}, and worker_category {string}")
	public void the_database_contains_an_order_with_customer_name_customer_phone_category_status_customer_address_appointment_date_order_description_and_worker(
			String customerName, String customerPhone, String orderCategory, String orderStatus, String customerAddress,
			String appointmentDate, String orderDescription, String workerName, String workerPhone,
			String workerCategory) {

		Worker worker = new Worker(workerName, workerPhone, OrderCategory.valueOf(workerCategory));
		EntityTransaction workerTransaction = entityManager.getTransaction();
		workerTransaction.begin();
		worker = entityManager.merge(worker);
		CustomerOrder order = new CustomerOrder(customerName, customerAddress, customerPhone, appointmentDate,
				orderDescription, OrderCategory.valueOf(orderCategory), OrderStatus.valueOf(orderStatus), worker);
		EntityTransaction orderTransaction = entityManager.getTransaction();
		CustomerOrder savedOrder = entityManager.merge(order);
		order = savedOrder;
		orderTransaction.commit();

	}

	@When("the Order View is shown")
	public void the_Order_View_is_shown() {
		application("com.mycompany.orderAssignmentSystem.app.OrderWorkerAssignmentSwingApp")
				.withArgs("--postgres-host=" + host, "--postgres-database=" + database, "--postgres-user=" + user,
						"--postgres-pass=" + password, "--postgres-port=" + port)
				.start();

		orderViewWindow = WindowFinder.findFrame(new GenericTypeMatcher<JFrame>(JFrame.class) {
			@Override
			protected boolean isMatching(JFrame frame) {
				return "Order Form".equals(frame.getTitle()) && frame.isShowing();
			}
		}).using(robotWithCurrentAwtHierarchy);
	}

	@Then("the order list contains an element with customer_name {string}, customer_phone {string}, category {string}, status {string}, customer_address {string}, appointment_date {string}, order_description {string}, and worker with worker_name {string}, worker_phone {string}, and worker_category {string}")
	public void the_order_list_contains_an_element_with_customer_name_customer_phone_category_status_customer_address_appointment_date_order_description_and_worker_with_worker_name_worker_phone_and_worker_category(
			String customerName, String customerPhone, String orderCategory, String orderStatus, String customerAddress,
			String appointmentDate, String orderDescription, String workerName, String workerPhone,
			String workerCategory) {
		assertThat(orderViewWindow.list().contents())
				.anySatisfy(e -> assertThat(e).contains(customerName, customerAddress, customerPhone, appointmentDate,
						orderDescription, orderCategory, orderStatus, workerName, workerPhone, workerCategory));
	}

//	@When("the Worker View is shown")
//	public void the_Worker_View_is_shown() {
//
//		orderViewWindow.button("btnManageWorker").click();
//		workerViewWindow = WindowFinder.findFrame(new GenericTypeMatcher<JFrame>(JFrame.class) {
//			@Override
//			protected boolean isMatching(JFrame frame) {
//				return "Worker View".equals(frame.getTitle()) && frame.isShowing();
//			}
//		}).using(BasicRobot.robotWithCurrentAwtHierarchy());
//		
//	}

//	
//	@Then("the worker list contains an element with worker_name {string}, worker_phone {string}, and worker_category {string}")
//	public void the_worker_list_contains_an_element_with_worker_name_worker_phone_and_worker_category(String workerName, String workerPhone, String workerCategory) {
//		String[] content = workerViewWindow.list("listWorkersss").contents();
//		assertThat(content)
//		.anySatisfy(e -> assertThat(e).contains(workerName, workerPhone, workerCategory));
//	}

	@When("the Worker View is shown")
	public void the_Worker_View_is_shown() {
		try {
			orderViewWindow.button("btnManageWorker").click();
			workerViewWindow = WindowFinder.findFrame(new GenericTypeMatcher<JFrame>(JFrame.class) {
				@Override
				protected boolean isMatching(JFrame frame) {
					return "Worker View".equals(frame.getTitle()) && frame.isShowing();
				}
			}).using(robotWithCurrentAwtHierarchy);
		} catch (Exception e) {
			System.out.println("I am in" + e.toString());

		}

	}

	@Then("the worker list contains an element with worker_name {string}, worker_phone {string}, and worker_category {string}")
	public void the_worker_list_contains_an_element_with_worker_name_worker_phone_and_worker_category(String workerName,
			String workerPhone, String workerCategory) {
		assertThat(workerViewWindow.list("listWorkers").contents())
				.anySatisfy(e -> assertThat(e).contains(workerName, workerPhone, workerCategory));
	}

}
